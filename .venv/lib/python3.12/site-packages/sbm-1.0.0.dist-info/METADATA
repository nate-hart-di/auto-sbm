Metadata-Version: 2.4
Name: sbm
Version: 1.0.0
Summary: Site Builder Migration Tool - Automate dealer website migrations to the Site Builder platform
Home-page: https://github.com/nate-hart-di/auto-sbm
Author: Nathan Hart
Author-email: nhart@dealerinspire.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-python
Dynamic: summary

# Site Builder Migration (SBM) Tool

A comprehensive, Python-based toolset for automating dealer website migrations to the DealerInspire Site Builder platform.

## Strategic Direction: Simplicity First

**The SBM project is committed to a "Simplicity First" philosophy.**

- The CLI is intentionally minimal, exposing only the most essential commands and options to users.
- Advanced or complex features from the original vision (such as interactive review sessions, automated PR creation, or a full diagnostics suite) are officially deprecated unless there is clear, demonstrated user demand.
- Only the most valuable, low-complexity enhancements—such as a basic `sbm doctor` command for system checks—will be considered for future development.
- The focus is on reliability, maintainability, and a frictionless user experience. Unnecessary CLI arguments, automation, or configuration will be avoided.
- This approach ensures the tool remains robust, easy to use, and maintainable for the long term.

## Overview

The SBM tool is a command-line utility designed to automate and streamline the migration of legacy dealer themes. It provides a robust, modular, and extensible framework for handling theme migrations, ensuring consistency and reducing manual effort.

## Key Features

- **Centralized SCSS Processing**: A powerful `SCSSProcessor` handles all parsing, categorization, transformation, and validation of styles using `libsass` for reliability.
- **Modular OEM Support**: A factory pattern allows for easy extension and handling of OEM-specific requirements. Includes a `StellantisHandler` and a `DefaultHandler` out of the box.
- **Robust Git Integration**: All Git operations (branching, committing, pushing) are handled safely and reliably using the `GitPython` library, not shell commands.
- **Dynamic Path Handling**: Relies on environment variables for pathing, making the tool portable and not tied to a specific machine's setup.
- **Modern CLI**: A clean, user-friendly command-line interface powered by `click`.

## Getting Started

Follow these steps to set up and install the SBM tool.

### 1. Clone the Repository

If you haven't already, clone the project to your local machine:

```bash
git clone <repository-url>
cd auto-sbm
```

### 2. Set Up a Virtual Environment

It is highly recommended to use a Python virtual environment to manage dependencies.

```bash
python3 -m venv .venv
source .venv/bin/activate
```

### 3. Install Dependencies

Install all required Python packages from the `requirements.txt` file.

```bash
pip install -r requirements.txt
```

### 4. Install the SBM Tool

To make the `sbm` command available in your terminal, install the package in "editable" mode. This links the command to your source code, so any changes are reflected immediately.

```bash
pip install -e .
```

### 5. Configure Your Environment

The tool requires an environment variable to locate your DealerInspire platform directory. Create a `.env` file in the project root:

```bash
touch .env
```

Then, add the following line to the `.env` file, replacing the path with the correct location on your machine:

```
DI_WEBSITES_PLATFORM_DIR="/Users/your-user/path/to/di-websites-platform"
```

## Usage

The SBM tool provides two main commands for migrating and validating themes.

### Running a Migration

To run the full migration process for a theme, use the `migrate` command:

```bash
sbm migrate <theme_name>
```

- **`<theme_name>`**: The slug of the dealer theme you want to migrate (e.g., `fiatofportland`).

**Options:**

- `--scss-only`: Use this flag to only process the SCSS files without running the full migration workflow (Git operations, etc.).
- `--dry-run`: Use this flag to see a preview of the changes without actually modifying any files.

### Validating a Theme

To validate the structure and SCSS syntax of an already migrated theme, use the `validate` command:

```bash
sbm validate <theme_name>
```

## Project Structure

The codebase is organized into a clean, modular structure:

- `sbm/`: The core Python package.
  - `cli.py`: Defines the CLI commands.
  - `core/`: Contains the main application logic (migration workflow, Git operations, etc.).
  - `scss/`: Contains the powerful `SCSSProcessor`.
  - `oem/`: Contains handlers for OEM-specific logic.
  - `utils/`: Shared helper functions for logging, pathing, etc.
- `documentation/`: Contains all project documentation.
- `archived/`: Contains legacy scripts and modules for historical reference.
- `tests/`: Contains the test suite for the project.

## Extending the Tool

### Adding a New OEM Handler

The tool is designed for easy extension. To add support for a new OEM:

1.  Create a new handler file in `sbm/oem/` (e.g., `honda.py`).
2.  Create a class that inherits from `BaseOEMHandler` (e.g., `HondaHandler`).
3.  Implement the required methods (`get_map_styles`, `get_brand_match_patterns`, etc.).
4.  Register your new handler in the `_handlers` list within `sbm/oem/factory.py`.

## Troubleshooting

- **`zsh: command not found: sbm`**: This usually means the tool wasn't installed correctly or your shell can't find it.
  - Ensure you are in your activated virtual environment (`source .venv/bin/activate`).
  - Try reinstalling the tool with `pip install --force-reinstall -e .`.
- **`Error: DI_WEBSITES_PLATFORM_DIR environment variable is not set`**:
  - Make sure you have created a `.env` file in the project root and that it contains the correct path.
- **Git operations fail**:
  - Ensure `GitPython` is installed correctly (`pip show gitpython`).
  - Confirm that your machine has the necessary permissions to access the repository.
