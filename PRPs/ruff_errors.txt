``sbm/cli.py:248:5: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
246 |           # Network timeout, skip silently
247 |           pass
248 | /     except Exception:
249 | |         # Any other error, fail silently to not interrupt user workflow
250 | |         pass
    | |____________^ S110
    |

sbm/cli.py:288:5: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
286 |                   f.write(f"Setup completed at {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
287 |
288 | /     except Exception:
289 | |         # Silently ignore setup errors during auto-update
290 | |         pass
    | |____________^ S110
    |

sbm/cli.py:300:31: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
298 |     """A custom command group that allows running a default command."""
299 |
300 |     def __init__(self, *args: Any, **kwargs: Any) -> None:
    |                               ^^^ ANN401
301 |         self.default_command = kwargs.pop("default_command", None)
302 |         super().__init__(*args, **kwargs)
    |

sbm/cli.py:300:46: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
298 |     """A custom command group that allows running a default command."""
299 |
300 |     def __init__(self, *args: Any, **kwargs: Any) -> None:
    |                                              ^^^ ANN401
301 |         self.default_command = kwargs.pop("default_command", None)
302 |         super().__init__(*args, **kwargs)
    |

sbm/cli.py:331:101: E501 Line too long (101 > 100)
    |
330 |     The main command for SBM migration with GitHub PR creation support.
331 |     By default, prompts to create PRs with default reviewers (carsdotcom/fe-dev) and labels (fe-dev).
    |                                                                                                     ^ E501
332 |     Use 'sbm pr <theme-name>' for manual PR creation or --no-create-pr to skip.
333 |     """
    |

sbm/cli.py:363:5: PLR0915 Too many statements (54 > 50)
    |
361 | @click.option("--force-reset", is_flag=True, help="Force reset of existing Site Builder files.")
362 | @click.option("--skip-maps", is_flag=True, help="Skip map components migration.")
363 | def migrate(theme_name: str, force_reset: bool, skip_maps: bool) -> None:
    |     ^^^^^^^ PLR0915
364 |     """
365 |     Migrate a dealer theme SCSS files to Site Builder format.
    |

sbm/cli.py:367:82: W291 Trailing whitespace
    |
365 |     Migrate a dealer theme SCSS files to Site Builder format.
366 |
367 |     This command runs the core migration steps (create files, migrate styles, add 
    |                                                                                  ^ W291
368 |     predetermined styles, migrate maps) followed by manual review and post-migration 
369 |     validation/formatting.
    |
    = help: Remove trailing whitespace

sbm/cli.py:368:85: W291 Trailing whitespace
    |
367 |     This command runs the core migration steps (create files, migrate styles, add 
368 |     predetermined styles, migrate maps) followed by manual review and post-migration 
    |                                                                                     ^ W291
369 |     validation/formatting.
    |
    = help: Remove trailing whitespace

sbm/cli.py:649:88: W291 Trailing whitespace
    |
647 | ) -> None:
648 |     """
649 |     Run post-migration steps for a given theme, including manual review, re-validation, 
    |                                                                                        ^ W291
650 |     Git operations, and PR creation.
651 |     This command assumes the initial migration (up to map components) has already been completed.
    |
    = help: Remove trailing whitespace

sbm/cli.py:735:15: F821 Undefined name `GitOperations`
    |
733 |     logger = ctx.obj["logger"]
734 |
735 |     git_ops = GitOperations(config)
    |               ^^^^^^^^^^^^^ F821
736 |
737 |     # Determine draft status
    |

sbm/cli.py:746:40: E741 Ambiguous variable name: `l`
    |
744 |         parsed_reviewers = [r.strip() for r in reviewers.split(",")]
745 |     if labels:
746 |         parsed_labels = [l.strip() for l in labels.split(",")]
    |                                        ^ E741
747 |
748 |     try:
    |

sbm/cli.py:751:21: G004 Logging statement uses f-string
    |
749 |         # The create_pr method in GitOperations will handle branch detection
750 |         # and PR content generation.
751 |         logger.info(f"Creating GitHub PR for {theme_name}...")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
752 |         pr_result = git_ops.create_pr(
753 |             slug=theme_name,
    |

sbm/cli.py:754:101: E501 Line too long (109 > 100)
    |
752 |         pr_result = git_ops.create_pr(
753 |             slug=theme_name,
754 |             branch_name=head,  # Pass head directly, GitOperations will handle current branch if head is None
    |                                                                                                     ^^^^^^^^^ E501
755 |             title=title,
756 |             body=body,
    |

sbm/cli.py:771:29: RUF001 String contains ambiguous `ℹ` (INFORMATION SOURCE). Did you mean `i` (LATIN SMALL LETTER I)?
    |
769 |                 click.echo("📝 Created as draft - remember to publish when ready")
770 |             if pr_result.get("existing"):
771 |                 click.echo("ℹ️  PR already existed - retrieved existing PR URL")
    |                             ^ RUF001
772 |         else:
773 |             click.echo(f"❌ PR creation failed: {pr_result['error']}", err=True)
    |

sbm/cli.py:777:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
776 |     except Exception as e:
777 |         logger.error(f"Unexpected error: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
778 |         sys.exit(1)
    |
    = help: Replace with `exception`

sbm/cli.py:777:22: G004 Logging statement uses f-string
    |
776 |     except Exception as e:
777 |         logger.error(f"Unexpected error: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ G004
778 |         sys.exit(1)
    |

sbm/cli.py:782:5: ANN201 Missing return type annotation for public function `update`
    |
781 | @cli.command()
782 | def update():
    |     ^^^^^^ ANN201
783 |     """
784 |     Manually update auto-sbm to the latest version.
    |
    = help: Add return type annotation: `None`

sbm/cli.py:790:19: F821 Undefined name `os`
    |
788 |     try:
789 |         # Force update regardless of disable file
790 |         git_dir = os.path.join(REPO_ROOT, ".git")
    |                   ^^ F821
791 |         if not os.path.exists(git_dir):
792 |             click.echo("❌ Not in a git repository. Cannot update.", err=True)
    |

sbm/cli.py:791:16: F821 Undefined name `os`
    |
789 |         # Force update regardless of disable file
790 |         git_dir = os.path.join(REPO_ROOT, ".git")
791 |         if not os.path.exists(git_dir):
    |                ^^ F821
792 |             click.echo("❌ Not in a git repository. Cannot update.", err=True)
793 |             sys.exit(1)
    |

sbm/cli.py:880:5: PLR0915 Too many statements (72 > 50)
    |
878 |     "--timeout", default=45, help="Maximum wait time for compilation in seconds (default: 45)."
879 | )
880 | def test_compilation(theme_name, no_cleanup, max_iterations, timeout):
    |     ^^^^^^^^^^^^^^^^ PLR0915
881 |     """
882 |     Test SCSS compilation error handling system without running a full migration.
    |

sbm/cli.py:880:5: ANN201 Missing return type annotation for public function `test_compilation`
    |
878 |     "--timeout", default=45, help="Maximum wait time for compilation in seconds (default: 45)."
879 | )
880 | def test_compilation(theme_name, no_cleanup, max_iterations, timeout):
    |     ^^^^^^^^^^^^^^^^ ANN201
881 |     """
882 |     Test SCSS compilation error handling system without running a full migration.
    |
    = help: Add return type annotation

sbm/cli.py:880:22: ANN001 Missing type annotation for function argument `theme_name`
    |
878 |     "--timeout", default=45, help="Maximum wait time for compilation in seconds (default: 45)."
879 | )
880 | def test_compilation(theme_name, no_cleanup, max_iterations, timeout):
    |                      ^^^^^^^^^^ ANN001
881 |     """
882 |     Test SCSS compilation error handling system without running a full migration.
    |

sbm/cli.py:880:34: ANN001 Missing type annotation for function argument `no_cleanup`
    |
878 |     "--timeout", default=45, help="Maximum wait time for compilation in seconds (default: 45)."
879 | )
880 | def test_compilation(theme_name, no_cleanup, max_iterations, timeout):
    |                                  ^^^^^^^^^^ ANN001
881 |     """
882 |     Test SCSS compilation error handling system without running a full migration.
    |

sbm/cli.py:880:46: ANN001 Missing type annotation for function argument `max_iterations`
    |
878 |     "--timeout", default=45, help="Maximum wait time for compilation in seconds (default: 45)."
879 | )
880 | def test_compilation(theme_name, no_cleanup, max_iterations, timeout):
    |                                              ^^^^^^^^^^^^^^ ANN001
881 |     """
882 |     Test SCSS compilation error handling system without running a full migration.
    |

sbm/cli.py:880:62: ANN001 Missing type annotation for function argument `timeout`
    |
878 |     "--timeout", default=45, help="Maximum wait time for compilation in seconds (default: 45)."
879 | )
880 | def test_compilation(theme_name, no_cleanup, max_iterations, timeout):
    |                                                              ^^^^^^^ ANN001
881 |     """
882 |     Test SCSS compilation error handling system without running a full migration.
    |

sbm/cli.py:893:5: PLC0415 `import` should be at the top-level of a file
    |
891 |     compilation issues without modifying the original files or running a full migration.
892 |     """
893 |     import time
    |     ^^^^^^^^^^^ PLC0415
894 |
895 |     click.echo(f"🧪 Testing SCSS compilation error handling for {theme_name}...")
    |

sbm/cli.py:900:19: F821 Undefined name `os`
    |
898 |     try:
899 |         theme_dir = get_dealer_theme_dir(theme_name)
900 |         css_dir = os.path.join(theme_dir, "css")
    |                   ^^ F821
901 |
902 |         # Check if theme directory exists
    |

sbm/cli.py:903:16: F821 Undefined name `os`
    |
902 |         # Check if theme directory exists
903 |         if not os.path.exists(theme_dir):
    |                ^^ F821
904 |             click.echo(f"❌ Theme directory not found: {theme_dir}", err=True)
905 |             sys.exit(1)
    |

sbm/cli.py:907:16: F821 Undefined name `os`
    |
905 |             sys.exit(1)
906 |
907 |         if not os.path.exists(css_dir):
    |                ^^ F821
908 |             click.echo(f"❌ CSS directory not found: {css_dir}", err=True)
909 |             sys.exit(1)
    |

sbm/cli.py:916:25: F821 Undefined name `os`
    |
915 |         for sb_file in sb_files:
916 |             file_path = os.path.join(theme_dir, sb_file)
    |                         ^^ F821
917 |             if os.path.exists(file_path):
918 |                 # Check if file has content
    |

sbm/cli.py:917:16: F821 Undefined name `os`
    |
915 |         for sb_file in sb_files:
916 |             file_path = os.path.join(theme_dir, sb_file)
917 |             if os.path.exists(file_path):
    |                ^^ F821
918 |                 # Check if file has content
919 |                 with open(file_path) as f:
    |

sbm/cli.py:919:22: PTH123 `open()` should be replaced by `Path.open()`
    |
917 |             if os.path.exists(file_path):
918 |                 # Check if file has content
919 |                 with open(file_path) as f:
    |                      ^^^^ PTH123
920 |                     content = f.read().strip()
921 |                 if content:
    |

sbm/cli.py:928:29: F821 Undefined name `os`
    |
926 |             click.echo("Available files to test:")
927 |             for sb_file in sb_files:
928 |                 file_path = os.path.join(theme_dir, sb_file)
    |                             ^^ F821
929 |                 if os.path.exists(file_path):
930 |                     click.echo(f"  - {sb_file} (empty)")
    |

sbm/cli.py:929:20: F821 Undefined name `os`
    |
927 |             for sb_file in sb_files:
928 |                 file_path = os.path.join(theme_dir, sb_file)
929 |                 if os.path.exists(file_path):
    |                    ^^ F821
930 |                     click.echo(f"  - {sb_file} (empty)")
931 |                 else:
    |

sbm/cli.py:944:24: F821 Undefined name `os`
    |
943 |         for sb_file in existing_files:
944 |             src_path = os.path.join(theme_dir, sb_file)
    |                        ^^ F821
945 |             test_filename = f"test-compilation-{sb_file}"
946 |             dst_path = os.path.join(css_dir, test_filename)
    |

sbm/cli.py:946:24: F821 Undefined name `os`
    |
944 |             src_path = os.path.join(theme_dir, sb_file)
945 |             test_filename = f"test-compilation-{sb_file}"
946 |             dst_path = os.path.join(css_dir, test_filename)
    |                        ^^ F821
947 |
948 |             shutil.copy2(src_path, dst_path)
    |

sbm/cli.py:982:9: TRY300 Consider moving this statement to an `else` block
    |
980 |             click.echo("- Try increasing --max-iterations or --timeout")
981 |
982 |         return success
    |         ^^^^^^^^^^^^^^ TRY300
983 |
984 |     except Exception as e:
    |

sbm/cli.py:1002:5: PLR0915 Too many statements (61 > 50)
     |
1002 | def _test_compilation_with_monitoring(
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
1004 | ):
     |

sbm/cli.py:1002:5: ANN202 Missing return type annotation for private function `_test_compilation_with_monitoring`
     |
1002 | def _test_compilation_with_monitoring(
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
1004 | ):
     |
     = help: Add return type annotation: `bool`

sbm/cli.py:1003:5: ANN001 Missing type annotation for function argument `css_dir`
     |
1002 | def _test_compilation_with_monitoring(
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
     |     ^^^^^^^ ANN001
1004 | ):
1005 |     """
     |

sbm/cli.py:1003:14: ANN001 Missing type annotation for function argument `test_files`
     |
1002 | def _test_compilation_with_monitoring(
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
     |              ^^^^^^^^^^ ANN001
1004 | ):
1005 |     """
     |

sbm/cli.py:1003:26: ANN001 Missing type annotation for function argument `theme_dir`
     |
1002 | def _test_compilation_with_monitoring(
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
     |                          ^^^^^^^^^ ANN001
1004 | ):
1005 |     """
     |

sbm/cli.py:1003:37: ANN001 Missing type annotation for function argument `slug`
     |
1002 | def _test_compilation_with_monitoring(
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
     |                                     ^^^^ ANN001
1004 | ):
1005 |     """
     |

sbm/cli.py:1003:37: ARG001 Unused function argument: `slug`
     |
1002 | def _test_compilation_with_monitoring(
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
     |                                     ^^^^ ARG001
1004 | ):
1005 |     """
     |

sbm/cli.py:1003:43: ANN001 Missing type annotation for function argument `max_iterations`
     |
1002 | def _test_compilation_with_monitoring(
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
     |                                           ^^^^^^^^^^^^^^ ANN001
1004 | ):
1005 |     """
     |

sbm/cli.py:1003:59: ANN001 Missing type annotation for function argument `timeout`
     |
1002 | def _test_compilation_with_monitoring(
1003 |     css_dir, test_files, theme_dir, slug, max_iterations, timeout
     |                                                           ^^^^^^^ ANN001
1004 | ):
1005 |     """
     |

sbm/cli.py:1019:5: PLC0415 `import` should be at the top-level of a file
     |
1017 |         bool: True if compilation succeeds, False if all recovery attempts fail
1018 |     """
1019 |     import subprocess
     |     ^^^^^^^^^^^^^^^^^ PLC0415
1020 |     import time
     |

sbm/cli.py:1020:5: PLC0415 `import` should be at the top-level of a file
     |
1018 |     """
1019 |     import subprocess
1020 |     import time
     |     ^^^^^^^^^^^ PLC0415
1021 |
1022 |     iteration = 0
     |

sbm/cli.py:1048:17: SIM102 Use a single `if` statement instead of nested `if` statements
     |
1047 |                   # Look for compilation success indicators
1048 | /                 if "finished 'sass'" in logs and "finished 'processcss'" in logs:
1049 | |                     # Check if any errors in recent logs
1050 | |                     if not any(
1051 | |                         error_indicator in logs
1052 | |                         for error_indicator in [
1053 | |                             "error:",
1054 | |                             "failed",
1055 | |                             "scss compilation error",
1056 | |                             "syntax error",
1057 | |                         ]
1058 | |                     ):
     | |______________________^ SIM102
1059 |                           click.echo("✅ Compilation completed successfully")
1060 |                           return True
     |
     = help: Combine `if` statements using `and`

sbm/cli.py:1063:17: PLC0415 `import` should be at the top-level of a file
     |
1062 |                 # Parse and handle specific errors
1063 |                 from .core.migration import _attempt_error_fix, _parse_compilation_errors
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
1064 |
1065 |                 errors_found = _parse_compilation_errors(logs, test_files)
     |

sbm/cli.py:1098:24: F821 Undefined name `os`
     |
1096 |         for test_filename, _ in test_files:
1097 |             css_filename = test_filename.replace(".scss", ".css")
1098 |             css_path = os.path.join(css_dir, css_filename)
     |                        ^^ F821
1099 |             if os.path.exists(css_path):
1100 |                 success_count += 1
     |

sbm/cli.py:1099:16: F821 Undefined name `os`
     |
1097 |             css_filename = test_filename.replace(".scss", ".css")
1098 |             css_path = os.path.join(css_dir, css_filename)
1099 |             if os.path.exists(css_path):
     |                ^^ F821
1100 |                 success_count += 1
     |

sbm/cli.py:1125:24: F821 Undefined name `os`
     |
1123 |         for test_filename, _ in test_files:
1124 |             css_filename = test_filename.replace(".scss", ".css")
1125 |             css_path = os.path.join(css_dir, css_filename)
     |                        ^^ F821
1126 |             if os.path.exists(css_path):
1127 |                 success_count += 1
     |

sbm/cli.py:1126:16: F821 Undefined name `os`
     |
1124 |             css_filename = test_filename.replace(".scss", ".css")
1125 |             css_path = os.path.join(css_dir, css_filename)
1126 |             if os.path.exists(css_path):
     |                ^^ F821
1127 |                 success_count += 1
     |

sbm/cli.py:1136:5: ANN202 Missing return type annotation for private function `_comment_out_problematic_code_for_test`
     |
1136 | def _comment_out_problematic_code_for_test(test_files, css_dir):
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
1137 |     """
1138 |     Comment out potentially problematic SCSS code in test files.
     |
     = help: Add return type annotation: `None`

sbm/cli.py:1136:44: ANN001 Missing type annotation for function argument `test_files`
     |
1136 | def _comment_out_problematic_code_for_test(test_files, css_dir):
     |                                            ^^^^^^^^^^ ANN001
1137 |     """
1138 |     Comment out potentially problematic SCSS code in test files.
     |

sbm/cli.py:1136:56: ANN001 Missing type annotation for function argument `css_dir`
     |
1136 | def _comment_out_problematic_code_for_test(test_files, css_dir):
     |                                                        ^^^^^^^ ANN001
1137 |     """
1138 |     Comment out potentially problematic SCSS code in test files.
     |

sbm/cli.py:1136:56: ARG001 Unused function argument: `css_dir`
     |
1136 | def _comment_out_problematic_code_for_test(test_files, css_dir):
     |                                                        ^^^^^^^ ARG001
1137 |     """
1138 |     Comment out potentially problematic SCSS code in test files.
     |

sbm/cli.py:1155:18: PTH123 `open()` should be replaced by `Path.open()`
     |
1153 |     for test_filename, scss_path in test_files:
1154 |         try:
1155 |             with open(scss_path) as f:
     |                  ^^^^ PTH123
1156 |                 content = f.read()
     |

sbm/cli.py:1163:21: PLC0415 `import` should be at the top-level of a file
     |
1161 |             for i, line in enumerate(lines):
1162 |                 for pattern in problematic_patterns:
1163 |                     import re
     |                     ^^^^^^^^^ PLC0415
1164 |
1165 |                     if re.search(pattern, line):
     |

sbm/cli.py:1165:21: SIM102 Use a single `if` statement instead of nested `if` statements
     |
1163 |                       import re
1164 |
1165 | /                     if re.search(pattern, line):
1166 | |                         if not line.strip().startswith("//"):
     | |_____________________________________________________________^ SIM102
1167 |                               lines[i] = f"// TEST COMMENTED: {line}"
1168 |                               modified = True
     |
     = help: Combine `if` statements using `and`

sbm/cli.py:1172:22: PTH123 `open()` should be replaced by `Path.open()`
     |
1171 |             if modified:
1172 |                 with open(scss_path, "w") as f:
     |                      ^^^^ PTH123
1173 |                     f.write("\n".join(lines))
     |

sbm/cli.py:1181:5: ANN202 Missing return type annotation for private function `_cleanup_test_files`
     |
1181 | def _cleanup_test_files(css_dir, test_files):
     |     ^^^^^^^^^^^^^^^^^^^ ANN202
1182 |     """
1183 |     Clean up test files and wait for Docker Gulp to process the cleanup.
     |
     = help: Add return type annotation: `None`

sbm/cli.py:1181:25: ANN001 Missing type annotation for function argument `css_dir`
     |
1181 | def _cleanup_test_files(css_dir, test_files):
     |                         ^^^^^^^ ANN001
1182 |     """
1183 |     Clean up test files and wait for Docker Gulp to process the cleanup.
     |

sbm/cli.py:1181:34: ANN001 Missing type annotation for function argument `test_files`
     |
1181 | def _cleanup_test_files(css_dir, test_files):
     |                                  ^^^^^^^^^^ ANN001
1182 |     """
1183 |     Clean up test files and wait for Docker Gulp to process the cleanup.
     |

sbm/cli.py:1189:5: PLC0415 `import` should be at the top-level of a file
     |
1187 |         test_files: List of (test_filename, scss_path) tuples
1188 |     """
1189 |     import time
     |     ^^^^^^^^^^^ PLC0415
1190 |
1191 |     try:
     |

sbm/cli.py:1196:20: F821 Undefined name `os`
     |
1194 |             try:
1195 |                 # Remove test SCSS file
1196 |                 if os.path.exists(scss_path):
     |                    ^^ F821
1197 |                     os.remove(scss_path)
     |

sbm/cli.py:1197:21: F821 Undefined name `os`
     |
1195 |                 # Remove test SCSS file
1196 |                 if os.path.exists(scss_path):
1197 |                     os.remove(scss_path)
     |                     ^^ F821
1198 |
1199 |                 # Remove generated CSS file
     |

sbm/cli.py:1201:28: F821 Undefined name `os`
     |
1199 |                 # Remove generated CSS file
1200 |                 css_filename = test_filename.replace(".scss", ".css")
1201 |                 css_path = os.path.join(css_dir, css_filename)
     |                            ^^ F821
1202 |                 if os.path.exists(css_path):
1203 |                     os.remove(css_path)
     |

sbm/cli.py:1202:20: F821 Undefined name `os`
     |
1200 |                 css_filename = test_filename.replace(".scss", ".css")
1201 |                 css_path = os.path.join(css_dir, css_filename)
1202 |                 if os.path.exists(css_path):
     |                    ^^ F821
1203 |                     os.remove(css_path)
     |

sbm/cli.py:1203:21: F821 Undefined name `os`
     |
1201 |                 css_path = os.path.join(css_dir, css_filename)
1202 |                 if os.path.exists(css_path):
1203 |                     os.remove(css_path)
     |                     ^^ F821
1204 |
1205 |             except Exception as e:
     |

sbm/cli.py:1218:5: ANN201 Missing return type annotation for public function `auto_update`
     |
1216 | @cli.command()
1217 | @click.argument("action", type=click.Choice(["enable", "disable", "status"]))
1218 | def auto_update(action):
     |     ^^^^^^^^^^^ ANN201
1219 |     """
1220 |     Manage auto-update settings for auto-sbm.
     |
     = help: Add return type annotation: `None`

sbm/cli.py:1218:17: ANN001 Missing type annotation for function argument `action`
     |
1216 | @cli.command()
1217 | @click.argument("action", type=click.Choice(["enable", "disable", "status"]))
1218 | def auto_update(action):
     |                 ^^^^^^ ANN001
1219 |     """
1220 |     Manage auto-update settings for auto-sbm.
     |

sbm/cli.py:1227:20: F821 Undefined name `os`
     |
1225 |     - status: Show current auto-update status
1226 |     """
1227 |     disable_file = os.path.join(REPO_ROOT, ".sbm-no-auto-update")
     |                    ^^ F821
1228 |
1229 |     if action == "enable":
     |

sbm/cli.py:1230:12: F821 Undefined name `os`
     |
1229 |     if action == "enable":
1230 |         if os.path.exists(disable_file):
     |            ^^ F821
1231 |             os.remove(disable_file)
1232 |             click.echo("✅ Auto-updates enabled. SBM will automatically update at startup.")
     |

sbm/cli.py:1231:13: F821 Undefined name `os`
     |
1229 |     if action == "enable":
1230 |         if os.path.exists(disable_file):
1231 |             os.remove(disable_file)
     |             ^^ F821
1232 |             click.echo("✅ Auto-updates enabled. SBM will automatically update at startup.")
1233 |         else:
     |

sbm/cli.py:1237:16: F821 Undefined name `os`
     |
1236 |     elif action == "disable":
1237 |         if not os.path.exists(disable_file):
     |                ^^ F821
1238 |             with open(disable_file, "w") as f:
1239 |                 f.write("# This file disables auto-updates for auto-sbm\n")
     |

sbm/cli.py:1238:18: PTH123 `open()` should be replaced by `Path.open()`
     |
1236 |     elif action == "disable":
1237 |         if not os.path.exists(disable_file):
1238 |             with open(disable_file, "w") as f:
     |                  ^^^^ PTH123
1239 |                 f.write("# This file disables auto-updates for auto-sbm\n")
1240 |                 f.write("# Delete this file or run 'sbm auto-update enable' to re-enable\n")
     |

sbm/cli.py:1246:12: F821 Undefined name `os`
     |
1245 |     elif action == "status":
1246 |         if os.path.exists(disable_file):
     |            ^^ F821
1247 |             click.echo("❌ Auto-updates are DISABLED")
1248 |             click.echo("   Run 'sbm auto-update enable' to enable automatic updates")
     |

Found 79 errors.
No fixes available (9 hidden fixes can be enabled with the `--unsafe-fixes` option).
