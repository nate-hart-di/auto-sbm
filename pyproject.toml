[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "auto-sbm"
version = "2.0.0"
description = "Automated Site Builder Migration Tool with Enhanced Rich UI"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "DealerInspire", email = "engineering@dealerinspire.com"}
]
keywords = ["migration", "scss", "site-builder", "dealership", "automotive"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Text Processing :: Markup",
]

dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "gitpython>=3.1.0",
    "jinja2>=3.0.0",
    "pyyaml>=6.0",
    "psutil>=5.9.0",
    "requests>=2.28.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "pathlib-mate>=1.2.0",
    "tinycss2>=1.2.1",
    "cssutils>=2.11.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=2.17.0",
    "types-requests>=2.28.0",
    "types-PyYAML>=6.0.0"
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0"
]

[project.scripts]
sbm = "sbm.cli:cli"

[project.urls]
Homepage = "https://github.com/dealerinspire/auto-sbm"
Repository = "https://github.com/dealerinspire/auto-sbm"
Issues = "https://github.com/dealerinspire/auto-sbm/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["sbm*"]
exclude = ["src*"]

[tool.setuptools.package-dir]

[tool.ruff]
line-length = 100
target-version = "py38"
src = ["sbm", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "RUF",  # ruff-specific rules
]
ignore = [
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "S101",    # assert
    "S603",    # subprocess-without-shell-equals-true
    "S607",    # start-process-with-partial-path
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches
    "PLR2004", # magic-value-comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "PLR2004", "ANN", "ARG"]

[tool.ruff.lint.isort]
known-first-party = ["sbm"]
force-single-line = false

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "libsass.*",
    "pyScss.*",
    "colorama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["sbm", "tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=sbm",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=50",
    "--strict-markers",
    "--strict-config",
    "--verbose"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["sbm"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for test files